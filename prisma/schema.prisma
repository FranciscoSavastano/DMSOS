// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  cpf                   String    @unique
  id                    String    @default(uuid()) @id
  nome                  String    
  email                 String    @unique
  password_digest       String
  is_new              Boolean     @default(true)
  contrato            String      @default("Nenhum")
  tentativas_de_login   Int       @default(0)
  last_login            DateTime?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  user_role             String    
  AuthenticationAudit AuthenticationAudit[]
  OS                  OS[]
  plantao             Plantao[]
  @@map("users")
}

model Cliente {
  id              String         @id @default(uuid())
  nome            String
  responsavel     String      @default("")
  telefone        String      @default("")
  email           String      @unique
  password_digest String      @default("")
  endereco        String      @default("")
  cnpj            String      @unique
  is_new          Boolean     @default(true)
  user_role       String      @default("Cliente")
  tentativas_de_login   Int       @default(0)
  services        String[]    @default(["Nenhum"])
  last_login            DateTime?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  equipamento Equipamento[]
  tipo_ocorrencias Ocurrence_types[]
  AuthenticationAudit AuthenticationAuditCustomer[]
  @@map("clientes")
}

model AuthenticationAudit {
  id          Int                   @id @default(autoincrement())
  ip_address  String?
  remote_port String?
  browser     String?
  status      AUTHENTICATION_STATUS
  user_id String?
  tecnico     User?                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at  DateTime              @default(now())

  @@map("authentication_audit")
}

model AuthenticationAuditCustomer {
  id          Int                   @id @default(autoincrement())
  ip_address  String?
  remote_port String?
  browser     String?
  status      AUTHENTICATION_STATUS
  cliente_id String?
  cliente     Cliente?                 @relation(fields: [cliente_id], references: [id], onDelete: Cascade)
  created_at  DateTime              @default(now())

  @@map("authentication_audit_customer")
}


enum UserType {
  TECNICO
  CLIENTE
}

model OS {
  id                    Int       @id @default(autoincrement())
  tipo_manutencao       String
  titulo                String    
  sistema               String
  tecnico_id            String
  data                  DateTime
  inicio                DateTime
  termino               DateTime
  descricao_tarefa      String
  anexos                String
  equipamento           Equipamento[]
  tecnico               User    @relation(fields: [tecnico_id], references: [id], onDelete: Cascade)
  @@map("OS")
}

model Plantao {
  id                    Int         @id @default(autoincrement())
  operadoresNome        String[]
  operadores            User[]
  data_inicio           DateTime    @default(now())
  data_fim              DateTime
  horario_rf            DateTime
  contrato              String
  ocorrencia            Ocorrencia[]
  informacoes_adicionais Json[]
  consideracoes         String      @default("")
  created_at            DateTime    @default(now())
  updated_at            DateTime    @updatedAt
  @@map("plantoes")
}

model PlantaoOperador {
  plantaoId  Int
  operadorId String
  @@id([plantaoId, operadorId])
  @@map("plantao_operador")
}
model Ocorrencia {
  id                    Int         @id @default(autoincrement())
  plantao_id            Int
  plantao               Plantao     @relation(fields: [plantao_id], references: [id], onDelete: Cascade)
  ocurrence_type        String      @default("Padrao")
  descricao             String?      
  horario            DateTime?
  termino            DateTime?
  data               DateTime       @default(now()) 
  local              String?     
  observacao         String?     
  acao               String?
  responsavel        String?
  @@map("ocorrencias")
}

model Ocurrence_types {
  id              Int           @default(autoincrement()) @id
  type            String
  subtypes        String[]
  contract_id     String
  contract        Cliente   @relation(fields: [contract_id], references: [id])        
  @@map("Ocurrence_type")
}

model Marca {
  id                    Int        @id  @default(autoincrement())
  marca                 String     @unique
  telefone              String    
  email                 String
  site                  String
  equipamento           Equipamento[]
  @@map("marcas")
}

model Equipamento {
  id                    Int         @id  @default(autoincrement())
  id_os                 Int         @unique
  nome                  String
  modelo                String
  marca_nome            String
  cliente_id            String
  ip                    String
  mac                   String
  NS                    String
  marca                 Marca       @relation(fields: [marca_nome], references: [marca])
  cliente               Cliente     @relation(fields: [cliente_id], references: [id])
  os                    OS          @relation(fields: [id_os], references: [id])

}

enum AUTHENTICATION_STATUS {
  SUCCESS
  USER_NOT_EXISTS
  INCORRECT_PASSWORD
  BLOCKED
}
