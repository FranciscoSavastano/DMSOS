// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Tecnico {
  cpf                   String
  id                    String    @default(uuid()) @id
  nome                  String    @unique
  email                 String    @unique
  password_digest       String
  is_admin              Boolean   @default(false)
  tentativas_de_login   Int       @default(0)
  last_login            DateTime?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt

  AuthenticationAudit AuthenticationAudit[]
  OS                  OS[]

  @@map("tecnicos")
}

model Cliente {
  id              String         @id @default(uuid())
  nome            String
  responsavel     String      @default("")
  telefone        String      @default("")
  email           String      @unique
  password_digest String      
  endereco        String      @default("")
  cnpj            String      @unique
  tentativas_de_login   Int       @default(0)
  last_login            DateTime?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  equipamento Equipamento[]
  @@map("clientes")
  AuthenticationAudit AuthenticationAudit[]
}
model AuthenticationAudit {
  id          Int                   @id @default(autoincrement())
  ip_address  String?
  remote_port String?
  browser     String?
  status      AUTHENTICATION_STATUS
  user_id     String?
  user_type   UserType              // Campo para distinguir entre Tecnico e Cliente
  tecnico     Tecnico?              @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "tecnico_user_id_fkey")
  cliente     Cliente?              @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "cliente_user_id_fkey")
  created_at  DateTime              @default(now())

  @@map("authentication_audit")
}

enum UserType {
  TECNICO
  CLIENTE
}

model OS {
  id                    Int       @id @default(autoincrement())
  tipo_manutencao       String
  titulo                String    
  sistema               String
  tecnico_nome          String
  data                  DateTime
  inicio                DateTime
  termino               DateTime
  descricao_tarefa      String
  anexos                String
  equipamento           Equipamento[]
  tecnico               Tecnico    @relation(fields: [tecnico_nome], references: [nome], onDelete: Cascade)
  @@map("OS")
}

model Marca {
  id                    Int        @id  @default(autoincrement())
  marca                 String     @unique
  telefone              String    
  email                 String
  site                  String
  equipamento           Equipamento[]
  @@map("marcas")
}

model Equipamento {
  id                    Int         @id  @default(autoincrement())
  id_os                 Int         @unique
  nome                  String
  modelo                String
  marca_nome            String
  cliente_id            String
  marca                 Marca       @relation(fields: [marca_nome], references: [marca])
  cliente               Cliente     @relation(fields: [cliente_id], references: [id])
  os                    OS          @relation(fields: [id_os], references: [id])

}

enum AUTHENTICATION_STATUS {
  SUCCESS
  USER_NOT_EXISTS
  INCORRECT_PASSWORD
  BLOCKED
}
